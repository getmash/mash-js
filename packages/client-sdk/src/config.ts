import { WalletButtonPosition } from "./api/routes.js";

import type { PartialDeep } from "type-fest";

type WidgetConfig = {
  /**
   * Base URL of hosted web components.
   */
  baseURL: string;
  /**
   * Controls whether to inject Mash Theme css file.
   */
  injectTheme: boolean;
  /**
   * @deprecated since version 2.13.0. Use injectWebComponentScripts
   */
  injectWidgets?: boolean;
  /**
   * Controls whether to inject Mash Web Component scripts tags to automatically
   * define web components.
   */
  injectWebComponentScripts: boolean;
  /**
   * Controls whether to inject Mash Floating Widget such as boosts.
   */
  injectFloatingWidgets: boolean;
};

// Local properties that are replicated server-side in the remote config.
// Specifying them overrides remote (local takes precedence).
export type Config = {
  /**
   * URL of Mash API.
   */
  api: string;
  /**
   * Earner ID generated by Mash Platform.
   */
  earnerID: string;
  /**
   * Mash Button App URL.
   */
  walletURL: string;
  /**
   * Mash Preboarding Modal App URL.
   * @deprecated url is constructed from wallet url
   */
  preboardingURL: string;
  /**
   * Widget Configuration. See WidgetConfig.
   */
  widgets: WidgetConfig;
  /**
   * Controls whether the Mash Button App will be automatically hidden
   * if no Mash elements exists on the page.
   */
  autoHide?: boolean;
  /**
   * Controls where on the window the Mash button will appear on
   */
  mashButtonPosition?: PartialDeep<WalletButtonPosition>;
};

export type PartialConfig = PartialDeep<Config> & { earnerID: string };

export const DefaultMashButtonURL = "https://app.mash.com/widget";

/**
 * Takes a url and a given subdomain to build a full url with a subdomain
 * @param url url to add subdomain to
 * @param subdomain subdomain to add
 * @returns full url with subdomain
 */
function buildSubdomainURL(url: URL, subdomain: string) {
  // Strip subdomains out of url
  const strippedURL = url.host.split(".").slice(-2).join(".");
  // Build full url
  return `${url.protocol}//${subdomain}.${strippedURL}`;
}

/**
 * Takes a string url and converts it to a URL object
 * Returns null if parsing fails
 * @param url url to parse
 * @returns a URL object or null if parsing failed
 */
function parseURL(url: string): URL | null {
  let parsed: URL;
  try {
    parsed = new URL(url);
  } catch (e) {
    return null;
  }
  return parsed;
}

export default function parse(config: PartialConfig): Config {
  // This URL is used to build all other URLS in the config, to ensure all Mash elements live in the same domain
  const mashButtonURL = parseURL(config.walletURL || DefaultMashButtonURL);

  if (mashButtonURL === null) {
    throw new Error(
      "Not a valid URL. Expecting a format like: https://example.com, https://sub.example.com",
    );
  }

  // Allow API URL to be overriden in case the API has a different domain
  const apiURL = config.api || buildSubdomainURL(mashButtonURL, "api");
  const preboardingURL = `${mashButtonURL.protocol}//${mashButtonURL.host}/preboarding`;

  const defaultWidgetsConfig: WidgetConfig = {
    baseURL: buildSubdomainURL(mashButtonURL, "widgets"),
    injectTheme: true,
    injectWebComponentScripts: true,
    injectFloatingWidgets: true,
  };

  return {
    earnerID: config.earnerID,
    api: apiURL,
    walletURL: mashButtonURL.href,
    preboardingURL,
    widgets: { ...defaultWidgetsConfig, ...config.widgets },
    autoHide: config.autoHide,
    mashButtonPosition: config.mashButtonPosition,
  };
}
